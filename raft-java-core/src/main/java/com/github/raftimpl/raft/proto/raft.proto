syntax="proto2";

package raft;
option java_package = "com.github.raftimpl.raft.proto";
option java_outer_classname = "RaftProto";

// Enum for response codes in the protocol
enum ResCode {
    RES_CODE_SUCCESS = 0;       // Operation was successful
    RES_CODE_FAIL = 1;          // Operation failed
    RES_CODE_NOT_LEADER = 2;    // Operation failed because the server is not the leader
}

// Enum for types of log entries
enum EntryType {
    ENTRY_TYPE_DATA = 0;            // Log entry contains data
    ENTRY_TYPE_CONFIGURATION = 1;   // Log entry contains configuration change
};

// Information about a network endpoint
message Endpoint {
    optional string host = 1; // Hostname or IP address
    optional uint32 port = 2; // Port number
}

// Representation of a server in the cluster
message Server {
    optional uint32 server_id = 1; // Unique identifier for the server
    optional Endpoint endpoint = 2; // Network endpoint for the server
}

// Configuration of the Raft cluster
message Configuration {
    repeated Server servers = 1; // List of servers in the cluster
}

// Metadata about the Raft log
message LogMetaData {
    optional uint64 current_term = 1;    // Current term of the server
    optional uint32 voted_for = 2;       // Server ID that received the vote
    optional uint64 first_log_index = 3; // Index of the first log entry
    optional uint64 commit_index = 4;    // Index of the highest log entry known to be committed
}

// Metadata for a Raft snapshot
message SnapshotMetaData {
    optional uint64 last_included_index = 1;  // Index of the last log entry included in the snapshot
    optional uint64 last_included_term = 2;   // Term of the last log entry included in the snapshot
    optional Configuration configuration = 3; // Configuration of the cluster at the point of the snapshot
}

// A single log entry
message LogEntry {
    optional uint64 term = 1;    // Term in which the entry was created
    optional uint64 index = 2;   // Index of the log entry
    optional EntryType type = 3; // Type of the entry (data or configuration)
    optional bytes data = 4;    // Binary data stored in the log entry
};

// Request to vote in an election
message VoteRequest {
    optional uint32 server_id = 1;       // ID of the candidate requesting the vote
    optional uint64 term = 2;            // Term number of the candidate
    optional uint64 last_log_term = 3;   // Term of the candidate's last log entry
    optional uint64 last_log_index = 4;  // Index of the candidate's last log entry
};

// Response to a vote request
message VoteResponse {
    optional uint64 term = 1;   // Current term, for the candidate to update itself
    optional bool granted = 2;  // True if the vote was granted
};

// Request to append entries to the log
message AppendEntriesRequest {
    optional uint32 server_id = 1;           // ID of the leader sending the request
    optional uint64 term = 2;                // Leader's term
    optional uint64 prev_log_index = 3;      // Index of log entry immediately preceding new ones
    optional uint64 prev_log_term = 4;       // Term of prev_log_index entry
    optional uint64 commit_index = 5;        // Index of highest log entry known to be committed
    repeated LogEntry entries = 6;           // Log entries to store (empty for heartbeat)
};

// Response to an append entries request
message AppendEntriesResponse {
    optional ResCode res_code = 1;       // Result of append entries (success, fail, or not leader)
    optional uint64 term = 2;            // Current term, for leader to update itself
    optional uint64 last_log_index = 3;  // Index of the last log in the follower's log
};

// Request to install a snapshot on a follower
message InstallSnapshotRequest {
    optional uint32 server_id = 1;               // ID of the leader sending the snapshot
    optional uint64 term = 2;                    // Leader's term
    optional SnapshotMetaData snapshot_meta_data = 3; // Metadata of the snapshot being sent
    optional string file_name = 4;               // Filename of the snapshot
    optional uint64 offset = 5;                  // Offset in the snapshot file
    optional bytes data = 6;                     // Portion of snapshot data
    optional bool is_first = 7;                  // True if this is the first chunk of the snapshot
    optional bool is_last = 8;                   // True if this is the last chunk of the snapshot
}

// Response to a snapshot installation request
message InstallSnapshotResponse {
    optional ResCode res_code = 1; // Result of the snapshot installation
    optional uint64 term = 2;      // Current term, for leader to update itself
}

// Request to get the current leader of the cluster
message GetLeaderRequest {
}

// Response to a get leader request
message GetLeaderResponse {
    optional ResCode res_code = 1;     // Result of the request (success or fail)
    optional string res_msg = 2;       // Additional message about the result
    optional Endpoint leader = 3;      // Endpoint of the current leader
}

// Request to add peers to the cluster
message AddPeersRequest {
    repeated Server servers = 1; // Servers to be added to the cluster
}

// Response to an add peers request
message AddPeersResponse {
    optional ResCode res_code = 1; // Result of the add operation
    optional string res_msg = 2;   // Additional message about the result
}

// Request to remove peers from the cluster
message RemovePeersRequest {
    repeated Server servers = 1; // Servers to be removed from the cluster
}

// Response to a remove peers request
message RemovePeersResponse {
    optional ResCode res_code = 1; // Result of the remove operation
    optional string res_msg = 2;   // Additional message about the result
}

// Request to get the cluster configuration
message GetConfigurationRequest {
}

// Response to a get configuration request
message GetConfigurationResponse {
    optional ResCode res_code = 1;      // Result of the request (success or fail)
    optional string res_msg = 2;        // Additional message about the result
    optional Server leader = 3;         // Current leader of the cluster
    repeated Server servers = 4;        // Current servers in the cluster
}

// Request to get the commit index of the leader
message GetLeaderCommitIndexRequest {
}

// Response to getting the leader's commit index
message GetLeaderCommitIndexResponse {
    optional uint64 commit_index = 1;   // Commit index of the leader
}
